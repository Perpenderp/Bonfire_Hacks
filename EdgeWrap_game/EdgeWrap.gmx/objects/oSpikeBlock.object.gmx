<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSpikeBlock</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>oSpike</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///&gt; Initialize Variables
grav = 0.25;
startgrav = grav;
hsp = 0;

hsp_carry = 0;
vsp = 0;
jumpspeed = 5;
movespeed = 10;
hsp2 = 0;


image_speed = 0
EffectHasPlayed = false;

//shadow
MyShadow = instance_create(x+6,y+6,oShadow)
MyShadow.sprite_index = sprite_index
MyShadow.image_xscale = image_xscale
MyShadow.image_yscale = image_yscale
MyShadow.image_speed = 0;
MyShadow.FollowingSpikeBlock = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///&gt; Collisions &amp; Controls &amp; Tilt 2

//Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
//key_jump = keyboard_check(vk_up) or mouse_check_button(mb_left);

oWalls = oWall;


//React to inputs
move = key_left + key_right;
hsp = move * movespeed;

if vsp &lt; 10
    vsp += grav;
        

        
if os_type == os_ios
    hsp = global.Sensitivity * 0.5 * device_get_tilt_x();
else if os_type == os_android
    hsp = -(global.Sensitivity * 0.5 * device_get_tilt_x());
else
    hsp = -((global.Sensitivity * 0.5 * device_get_tilt_x()) + keyboard_check(vk_left) * 5 - (keyboard_check(vk_right) * 5));

var hsp_final = hsp + hsp_carry;
hsp_carry = 0;
    
//Horizontal Collision
if place_meeting(x + hsp_final, y, oWalls)
{
    while !place_meeting(x + sign(hsp_final), y, oWalls)
    {
        if hsp2 == 0
            x += sign(hsp_final);
        if hsp_final == 0
            x += sign(hsp2);
    }
    hsp_final = 0;
    hsp2 = 0;
}

x += hsp_final + hsp2;

//Vertical Collision 
if (place_meeting(x,y+vsp*4,oWalls))
{
    while !place_meeting(x, y + sign(vsp*4), oWalls)
        y += sign(vsp);
    vsp = 0;
}


y += vsp * 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_sprite_ext(sprite_index,image_index,x+6,y+6,image_xscale,image_yscale,image_angle,c_black,0.25);
draw_self();
draw_sprite_ext(sprite_index,1,x,y,image_xscale,image_yscale,image_angle,c_white,image_alpha);

//Left ---&gt; Right
if x &lt;= oWarpLeft.bbox_right
    x = oWarpRight.bbox_left-1;
//Right ---&gt; Left
if x &gt;= oWarpRight.bbox_left
    x = oWarpLeft.bbox_right+1;

//Up ---&gt; Down
if y &lt;= oWarpTop.bbox_bottom
    y = oWarpBottom.bbox_top-1;
//Right ---&gt; Left
if y &gt;= oWarpBottom.bbox_top
    y = oWarpTop.bbox_bottom+1;

//Draw
//LR
if bbox_left &lt;= oWarpLeft.bbox_right {
    draw_sprite_ext(sprite_index, image_index, oWarpRight.bbox_left - (oWarpLeft.bbox_right - x), y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    draw_sprite_ext(sprite_index, 1, oWarpRight.bbox_left - (oWarpLeft.bbox_right - x), y, image_xscale, image_yscale, image_angle, c_white, image_alpha);
}
//RL
if bbox_right &gt;= oWarpRight.bbox_left {
    draw_sprite_ext(sprite_index, image_index, oWarpLeft.bbox_right - (oWarpRight.bbox_left - x), y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    draw_sprite_ext(sprite_index, 1, oWarpLeft.bbox_right - (oWarpRight.bbox_left - x), y, image_xscale, image_yscale, image_angle, c_white, image_alpha);
}
//TB
if bbox_top &lt;= oWarpTop.bbox_bottom {
    draw_sprite_ext(sprite_index, image_index, x, oWarpBottom.bbox_top - (oWarpTop.bbox_bottom - y), image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    draw_sprite_ext(sprite_index, 1, x, oWarpBottom.bbox_top - (oWarpTop.bbox_bottom - y), image_xscale, image_yscale, image_angle, c_white, image_alpha);
}
//BT
if bbox_bottom &gt;= oWarpBottom.bbox_top {
    draw_sprite_ext(sprite_index, image_index,x, oWarpTop.bbox_bottom - (oWarpBottom.bbox_top - y), image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    draw_sprite_ext(sprite_index, 1, x, oWarpTop.bbox_bottom - (oWarpBottom.bbox_top - y), image_xscale, image_yscale, image_angle, c_white, image_alpha);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
