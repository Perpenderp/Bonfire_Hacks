<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>IAm = "Null";
SliderVal = 0;
startx = x;
starty = y;
SliderSize = 0;
SwitchPos = 0;
DrawSquareX = x;
SwitchDoesWhat = "No Function";

OneTime = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if IAm == "Switch" {
    //Setup
    sprite_index = sChar;
    image_xscale = 4;
    image_yscale = 2;
    x = startx + 20;
    //draw_self();
    
    //Visual
    draw_set_alpha(1);
    draw_set_colour(make_colour_rgb(100 - SwitchPos * 50, SwitchPos * 100, SwitchPos * 25));
    draw_rectangle(startx - 8, starty - 16, startx + 48, starty + 16, false);
    
    draw_set_colour(make_colour_rgb(50, 50, 50));
    if SwitchPos == 0 and DrawSquareX &gt; startx
        DrawSquareX -= 4;
    if SwitchPos == 1 and DrawSquareX &lt; startx + 40
        DrawSquareX += 4;
    draw_rectangle(DrawSquareX - 20, y - 20, DrawSquareX + 20, y + 20, false);
    
    //Label
    draw_set_font(FNT_CREDITS);
    draw_set_colour(c_black);
    draw_set_alpha(1);
    draw_set_halign(fa_left);
    draw_set_valign(fa_center);
    
    draw_text(startx - 405 + 135 / 2, y, SwitchDoesWhat);
    
    
    //Function
    if mouse_check_button_released(mb_left) and position_meeting(mouse_x, mouse_y, self) {
        if SwitchPos == 0 {
            SwitchPos = 1; 
            if SwitchDoesWhat == "Hardcore Mode"
                global.LivesEnabled = true;
            exit;
        }
        
        if SwitchPos == 1 {
            SwitchPos = 0; 
            if SwitchDoesWhat = "Hardcore Mode"
                global.LivesEnabled = false;
            exit;
        }
    }

}

if IAm == "Slider" {
    SliderSize = 120;
    if OneTime {
        startx = view_xview + (view_wview / 2);
        x = view_xview + (view_wview / 2);
        OneTime = false;
    }
    SliderSize = (540 - 135 - 52) / 2;
    
    sprite_index = sChar;
    image_xscale = 2;
    image_yscale = 2;
    //draw_self();
    
    draw_set_alpha(1);
    draw_set_colour(make_colour_rgb(100, 100, 100));
    draw_rectangle(startx - SliderSize - 30, starty - 5, startx + SliderSize + 30, starty + 5, false);
    
    draw_set_colour(make_colour_rgb(50, 50, 50));
    draw_rectangle(x - 20, y - 20, x + 20, y + 20, false);
    
    switch (sliderPurpose) {
        case "Music volume":
            x = (SliderSize * 2 * global.musicVol) + (startx - SliderSize);
            break;
        case "SFX volume":
            x = (SliderSize * 2 * global.sfxVol) + (startx - SliderSize);
            break;
    }
    
    if mouse_check_button(mb_left) and position_meeting(mouse_x, mouse_y, self) {
        if mouse_x &gt; startx-SliderSize and mouse_x &lt; startx+SliderSize
            x = mouse_x;
        if mouse_x &lt; startx-SliderSize
            x = startx-SliderSize;
        if mouse_x &gt; startx+SliderSize
            x = startx+SliderSize;
    }
    
    SliderVal = (x - (startx - SliderSize)) / SliderSize / 2;
    draw_set_font(FNT_LABELS);
    draw_set_colour(c_black);
    draw_set_alpha(1);
    draw_set_halign(fa_center);
    
    if sliderPurpose == "Sensitivity" {
        if (SliderVal - 0.5) * 100 &gt;= 0
            draw_text(x, y - 60, "+" + string(round((SliderVal - 0.5) * 100)) + "%");
        else
            draw_text(x, y - 60, string(round((SliderVal - 0.5) * 100)) + "%");
    } else
        draw_text(x, y - 60, string(round(SliderVal * 100)) + "%");
    
    draw_set_font(FNT_CREDITS);
    
    draw_text(startx, y - 120, sliderPurpose);
    
    switch (sliderPurpose) {
        case "Sensitivity":
            global.Sensitivity = 25 * (SliderVal + 0.5);
            break;
        case "Music volume":
            //TODO: make persistent
            global.musicVol = SliderVal;
            audio_sound_gain(SND_MUSIC, global.musicVol, 0);
            audio_sound_gain(SND_MUSIC_2, global.musicVol, 0);
            break;
        case "SFX volume":
            global.sfxVol = SliderVal;
            audio_sound_gain(SND_DIE, global.sfxVol, 0);
            audio_sound_gain(SND_DING, global.sfxVol, 0);
            audio_sound_gain(SND_JUMP, global.sfxVol, 0);
            audio_sound_gain(SND_WOOSH, global.sfxVol, 0);
            break;
    }
    ini_open('savedata.ini');
    ini_write_real('settings', 'musicVol', global.musicVol);
    ini_write_real('settings', 'sfxVol', global.sfxVol);
    ini_close();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
