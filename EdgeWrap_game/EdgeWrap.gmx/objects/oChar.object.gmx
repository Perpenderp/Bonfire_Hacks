<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sChar</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///&gt; Initialize Variables
grav = 0.25;
startgrav = grav;
hsp = 0;
hsp2 = 0;
hsp_carry = 0;
vsp = 0;
jumpspeed = 5;
movespeed = 10;
ShouldDrawNewSprite = false;
ShouldDrawNewSpriteVert = false;
PlayerCanMove = true;

image_blend = make_colour_rgb(219,27,59)
image_speed = 0
delta_image_scale = 0;
//image_blend = make_colour_rgb(75,150,200)
//image_blend = make_colour_rgb(89,125,206)



//shadow
MyShadow = instance_create(x+6,y+6,oShadow)
MyShadow.sprite_index = sprite_index
MyShadow.image_xscale = image_xscale
MyShadow.image_yscale = image_yscale
MyShadow.FollowingChar = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>oChar</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///&gt; Collisions &amp; Controls &amp; Tilt

if room = TitleScreen
    moretiltright = 0.15;
else
    moretiltright = 0;

if delta_image_scale &lt; 1
    delta_image_scale += 0.05;



//Get the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check(vk_up) or mouse_check_button(mb_left);

oWalls = oWall;


//React to inputs
move = key_left + key_right;
hsp = move * movespeed;



if PlayerCanMove = true
    if (vsp &lt; 10)
        vsp += grav;
        

        
if os_type == os_ios
    hsp = global.Sensitivity * (device_get_tilt_x() - moretiltright);
else if os_type == os_android
    hsp = -(global.Sensitivity * (device_get_tilt_x() + moretiltright));
else
    hsp = -((global.Sensitivity * device_get_tilt_x()) + keyboard_check(vk_left) * (global.Sensitivity/2.5) 
            - keyboard_check(vk_right) * (global.Sensitivity/2.5));



if place_meeting(x, y+1, oWalls)
    vsp = key_jump * -jumpspeed

var hsp_final = hsp + hsp_carry;
hsp_carry = 0;
    
//Horizontal Collision
if place_meeting(x + hsp_final, y, oWalls) {
    while !place_meeting(x + sign(hsp_final), y, oWalls) {
        if hsp2 == 0
            x += sign(hsp_final);
        if hsp_final == 0
            x += sign(hsp2);
    }
    hsp_final = 0;
    hsp2 = 0;
}

if PlayerCanMove
    x += hsp_final+hsp2;

//Vertical Collision 
if place_meeting(x, y + vsp * 4, oWalls) {
    while !place_meeting(x, y + sign(vsp * 4), oWalls) {
        y += sign(vsp);
    }
    vsp = 0;
}

if PlayerCanMove
    y += vsp*4;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>x</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1000000</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///&gt; Wrap

CenterWrapTopY = oWarpTop.y+oWarpTop.sprite_height;
CenterWrapBottomY = oWarpBottom.y//+oWarpBottom.sprite_height/2;
CenterWrapLeftX = oWarpLeft.x+oWarpLeft.sprite_width;
CenterWrapRightX = oWarpRight.x//+oWarpRight.sprite_width/2;

// X wrapping
wrap_x = 0;
if (x &lt; CenterWrapLeftX) {                   // left -&gt; right
    if (x + sprite_width/2 &gt; CenterWrapLeftX)
        wrap_x = CenterWrapRightX - (CenterWrapLeftX - x);
    else
        x = CenterWrapRightX - (CenterWrapLeftX - x);
}
else if (x &gt; CenterWrapRightX) {            // right -&gt; left
    if (x - CenterWrapRightX &gt; sprite_width/2)
        wrap_x = CenterWrapLeftX - (x - CenterWrapRightX);
    else
        x = CenterWrapLeftX - (x - CenterWrapRightX);
}

if (wrap_x != 0)
    ShouldDrawNewSprite = true
else
    ShouldDrawNewSprite = false;


// Y wrapping
wrap_y = 0;
if (y &lt; CenterWrapTopY) {                   // top -&gt; down
    if (y + sprite_width/2 &gt; CenterWrapTopY)
        wrap_y = CenterWrapBottomY - (CenterWrapTopY - y);
    else
        y = CenterWrapBottomY - (CenterWrapTopY - y);
}
else if (y &gt; CenterWrapBottomY) {            // down -&gt; top
    if (y - CenterWrapBottomY &gt; sprite_width/2)
        wrap_y = CenterWrapTopY - (y - CenterWrapBottomY);
    else
        y = CenterWrapTopY - (y - CenterWrapBottomY);
}

if (wrap_y != 0)
    ShouldDrawNewSpriteVert = true 
else
    ShouldDrawNewSpriteVert = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oGoal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ThisGoal = other;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="40">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.World</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index, image_index, x, y, delta_image_scale, delta_image_scale, image_angle, image_blend, image_alpha);
//draw_self();

//Left ---&gt; Right
if (x &lt;= oWarpLeft.bbox_right)
    x = oWarpRight.bbox_left-1;
//Right ---&gt; Left
if (x &gt;= oWarpRight.bbox_left)
    x = oWarpLeft.bbox_right+1;

//Up ---&gt; Down
if (y &lt;= oWarpTop.bbox_bottom) y = oWarpBottom.bbox_top-1;
//Right ---&gt; Left
if (y &gt;= oWarpBottom.bbox_top) y = oWarpTop.bbox_bottom+1;

//Draw
//LR
if (bbox_left &lt;= oWarpLeft.bbox_right)   
    draw_sprite_ext(sprite_index,image_index,oWarpRight.bbox_left-(oWarpLeft.bbox_right-x),y,image_xscale,image_yscale,image_angle,image_blend,image_alpha);

//RL
if (bbox_right &gt;= oWarpRight.bbox_left)
    draw_sprite_ext(sprite_index,image_index,oWarpLeft.bbox_right-(oWarpRight.bbox_left-x),y,image_xscale,image_yscale,image_angle,image_blend,image_alpha);

//TB
if (bbox_top &lt;= oWarpTop.bbox_bottom) 
    draw_sprite_ext(sprite_index,image_index,x,oWarpBottom.bbox_top-(oWarpTop.bbox_bottom-y),image_xscale,image_yscale,image_angle,image_blend,image_alpha);

//BT
if (bbox_bottom &gt;= oWarpBottom.bbox_top) 
    draw_sprite_ext(sprite_index,image_index,x,oWarpTop.bbox_bottom-(oWarpBottom.bbox_top-y),image_xscale,image_yscale,image_angle,image_blend,image_alpha);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>x</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1000000</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///&gt; Draw Wrap XY
draw_sprite_ext(sprite_index, image_index, x, y, 
                delta_image_scale, delta_image_scale, image_angle, image_blend, image_alpha);

if ShouldDrawNewSprite {
    if (wrap_x != 0)
        draw_sprite_ext(sprite_index, image_index,
                            wrap_x,
                            y, 
                        image_xscale, image_yscale, image_angle, image_blend, image_alpha);
}
    
if ShouldDrawNewSpriteVert {
    if (wrap_y != 0)
        draw_sprite_ext(sprite_index, image_index,
                            x,
                            wrap_y,
                        image_xscale, image_yscale, image_angle, image_blend, image_alpha);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
